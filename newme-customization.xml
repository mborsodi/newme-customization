<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:rng="http://relaxng.org/ns/structure/1.0"
  xmlns:sch="http://purl.oclc.org/dsdl/schematron">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>Music Encoding Initiative Guidelines: <title type="sub">Newmes
          Customization</title></title>
      </titleStmt>
      <publicationStmt>
        <p/>
      </publicationStmt>
      <sourceDesc>
        <p/>
      </sourceDesc>
    </fileDesc>
  </teiHeader>
  <text>
    <front>
      <divGen type="toc"/>
    </front>
    <body>
      <schemaSpec ident="mei" ns="http://www.music-encoding.org/ns/mei" start="mei meiHead meiCorpus
        music">
        
        <moduleRef key="MEI"/>
        <moduleRef key="MEI.header"/>
        <moduleRef key="MEI.shared"/>
        <moduleRef key="MEI.corpus"/>
        <moduleRef key="MEI.critapp"/>
        <moduleRef key="MEI.facsimile"/>
        <moduleRef key="MEI.edittrans"/>
        <moduleRef key="MEI.figtable"/>
        <moduleRef key="MEI.namesdates"/>
        <moduleRef key="MEI.analysis"/>
        <moduleRef key="MEI.text"/>
        <moduleRef key="MEI.lyrics"/>
        <moduleRef key="MEI.performance"/>
        
        
        <!--<!-\-Add neume to meta data-\->
        <elementSpec ident=""-->
        
        
        <!-- Make staffdef optional -->
        <!--<classSpec ident="model.eventLike" module="MEI.shared" type="model" mode="replace"/>-->
        
        
        <!-- Define the new module -->
        <moduleSpec ident="MEI.newmes"/>
        
        
        <!--Create neume element-->
        <elementSpec ident="neume" module="MEI.newmes" mode="add">
          <gloss>Neume</gloss>
          <desc>
            Identifies a neume and its properties, including text, pitch, contour and name.
          </desc>
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.typed"/>
            <memberOf key="att.newmes.neume.log"/>
            <memberOf key="att.newmes.neume.vis"/>
            <memberOf key="att.newmes.neume.ges"/>
            <memberOf key="att.newmes.neume.anl"/>
            <memberOf key="att.newmes.neume"/>
            <memberOf key="model.eventLike"/>
          </classes>
          <attList>
            <attDef ident="cont" usage="opt">
              <gloss>Neume contour</gloss>
              <desc>
                Contour
              </desc>
              <valList type="closed">
                <valItem ident="N"/>
                <valItem ident="NH"/>
              </valList>
            </attDef>
            <attDef ident="connect" usage="opt">
              <gloss>Neume connectivity</gloss>
              <desc>
                connectivity
              </desc>
              <valList type="closed">
                <valItem ident="l"/>
                <valItem ident="n"/>
              </valList> 
            </attDef>
            <attDef ident="name" usage="opt">
              <gloss>Neume name</gloss>
              <desc>
                name
              </desc>
              <valList type="closed">
                <valItem ident="punctum"/>
                <valItem ident="virga"/>
                <valItem ident="pes"/>
                <valItem ident="clivis"/>
                <valItem ident="torculus"/>
                <valItem ident="torculusresupinus"/>
                <valItem ident="porrectus"/>
                <valItem ident="porrectusflexus"/>
                <valItem ident="apostropha"/>
                <valItem ident="oriscus"/>
                <valItem ident="pressusmaior"/>
                <valItem ident="pressusminor"/>
                <valItem ident="virgastrata"/>
              </valList>
            </attDef>
          </attList>
          <constraintSpec ident="neume_attributes"
            scheme="isoschematron">
            <constraint>
              <sch:pattern>
                <sch:rule context="mei:neume">
                  <sch:assert test="not(@cont) or (@cont and @connect)">Must have both @cont and @connect and/or @name</sch:assert>
                  <sch:assert test="not(@connect) or (@cont and @connect)">Must have both @cont and @connect and/or @name</sch:assert>
                  <sch:assert test="@name or @cont or @connect">Must have both @cont and @connect and/or @name</sch:assert>
                </sch:rule>
              </sch:pattern>
            </constraint>
          </constraintSpec>
          <content>
            <rng:zeroOrMore>
              <rng:choice>
                <rng:ref name="note"/>
              </rng:choice>
            </rng:zeroOrMore>
          </content>
        </elementSpec>
        
        
        <!--Change accidental-->
        <classSpec ident="att.accidental" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes for capturing momentary pitch inflection.</desc>
          <attList>
            <attDef ident="accid" usage="opt">
              <desc>captures a written accidental.</desc>
              <datatype>
                <rng:ref name="data.ACCIDENTAL.EXPLICIT"/>
              </datatype>
              <valList type="closed">
                <valItem ident="f"/>
              </valList>
              <constraintSpec ident="accid_on_b_only"
                scheme="isoschematron">
                <constraint>
                  <sch:rule context="mei:note">
                    <sch:report test="not(@pname='b') and @accid">accidentals can only be placed on the note b</sch:report>
                  </sch:rule>
                </constraint>
              </constraintSpec>
            </attDef>
          </attList>
        </classSpec>
        
        
        <!--Pitch required-->
        <classSpec ident="att.pitch" module="MEI.shared" type="atts" mode="replace">
          <desc>Attributes that record written pitch name.</desc>
          <attList>
            <attDef ident="pname" usage="req">
              <desc>contains a written pitch name.</desc>
              <datatype>
                <rng:ref name="data.PITCHNAME"/>
              </datatype>
            </attDef>
          </attList>
        </classSpec>
        
        
        <!--Add syllable element-->
        <elementSpec ident="syllable" module="MEI.newmes" mode="add">
          <classes>
            <memberOf key="att.common"/>
            <memberOf key="att.facsimile"/>
            <memberOf key="att.typed"/>
            <memberOf key="model.eventLike"/>
          </classes>
          <attList>
            <attDef ident="syl" usage="req">
              <gloss>syllable text</gloss>
              <desc>
                text
              </desc>
            </attDef>
            <attDef ident="pos" usage="rec">
              <valList type="closed">
                <valItem ident="i"/>
                <valItem ident="m"/>
                <valItem ident="t"/>
              </valList>
            </attDef>
          </attList>
          <content>
            <rng:oneOrMore>
              <rng:choice>
                <rng:ref name="neume"/>
              </rng:choice>
            </rng:oneOrMore>
          </content>
        </elementSpec>
        
        
        <!--Remove chords and rests-->
        <elementSpec ident="chord" module="MEI.shared" mode="delete"/>
        <elementSpec ident="rest" module="MEI.shared" mode="delete"/>
        <elementSpec ident="barLine" module="MEI.shared" mode="delete"/>
        <elementSpec ident="keySig" module="MEI.shared" mode="delete"/>
        
        <!-- Remove dur attribute -->
        <classSpec ident="att.duration.musical" module="MEI.shared" type="atts" mode="delete"/>
        
        
        <!-- Remove key attribute -->
        <classSpec ident="att.keySigDefault.log" module="MEI.shared" type="atts" mode="delete"/>
        <classSpec ident="att.keyModeDefault.log" module="MEI.shared" type="atts" mode="delete"/>

        
        
      </schemaSpec>
    </body>
  </text>
</TEI>
